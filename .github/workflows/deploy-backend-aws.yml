name: Deploy Backend to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'Dockerfile'
      - 'requirements.txt'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aushadhi-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          if [ $? -ne 0 ]; then
            echo "Error: Docker build failed!"
            exit 1
          fi
          
          # Push the image
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          if [ $? -ne 0 ]; then
            echo "Error: Failed to push Docker image to ECR!"
            exit 1
          fi
          
          # Tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Output the image URI
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Generate Dockerrun.aws.json
        run: |
          echo "Generating Dockerrun.aws.json..."
          cat > Dockerrun.aws.json << EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ steps.login-ecr.outputs.registry }}/aushadhi-backend:${{ github.sha }}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": 8007,
                "HostPort": 8007
              }
            ],
            "Volumes": [],
            "Logging": "/var/log",
            "Environment": [
              {
                "Name": "AZURE_VISION_ENDPOINT",
                "Value": "${{ secrets.AZURE_VISION_ENDPOINT }}"
              },
              {
                "Name": "AZURE_VISION_KEY",
                "Value": "${{ secrets.AZURE_VISION_KEY }}"
              },
              {
                "Name": "ALLOWED_ORIGINS",
                "Value": "https://harryhome1.github.io,http://localhost:8006"
              }
            ]
          }
          EOF
          
      - name: Check if Elastic Beanstalk environment exists
        id: check-env
        run: |
          echo "Checking if Elastic Beanstalk environment exists..."
          
          # Create the application if it doesn't exist
          if ! aws elasticbeanstalk describe-applications --application-names aushadhi-backend &>/dev/null; then
            echo "Creating Elastic Beanstalk application 'aushadhi-backend'..."
            aws elasticbeanstalk create-application --application-name aushadhi-backend --description "AushadhiAI Backend API"
          else
            echo "Elastic Beanstalk application 'aushadhi-backend' already exists."
          fi
          
          # Check if the environment exists
          if ! aws elasticbeanstalk describe-environments --environment-names aushadhi-production --query "Environments[?Status!='Terminated'].EnvironmentName" --output text | grep -q aushadhi-production; then
            echo "Creating Elastic Beanstalk environment 'aushadhi-production'..."
            
            # Check if ECR repository exists and create it if it doesn't
            if ! aws ecr describe-repositories --repository-names aushadhi-backend &>/dev/null; then
              echo "Creating ECR repository 'aushadhi-backend'..."
              aws ecr create-repository --repository-name aushadhi-backend --image-scanning-configuration scanOnPush=true
            fi
            
            # Create options file for environment creation
            cat > eb-options-temp.json << 'EOF'
            [
              {
                "Namespace": "aws:autoscaling:launchconfiguration",
                "OptionName": "IamInstanceProfile",
                "Value": "aws-elasticbeanstalk-ec2-role"
              },
              {
                "Namespace": "aws:elasticbeanstalk:application:environment",
                "OptionName": "AZURE_VISION_ENDPOINT",
                "Value": "${{ secrets.AZURE_VISION_ENDPOINT }}"
              },
              {
                "Namespace": "aws:elasticbeanstalk:application:environment",
                "OptionName": "AZURE_VISION_KEY",
                "Value": "${{ secrets.AZURE_VISION_KEY }}"
              },
              {
                "Namespace": "aws:elasticbeanstalk:application:environment",
                "OptionName": "ALLOWED_ORIGINS",
                "Value": "https://harryhome1.github.io,http://localhost:8006"
              },
              {
                "Namespace": "aws:elasticbeanstalk:environment",
                "OptionName": "EnvironmentType",
                "Value": "SingleInstance"
              },
              {
                "Namespace": "aws:elasticbeanstalk:application:environment",
                "OptionName": "USE_AZURE_OCR",
                "Value": "True"
              },
              {
                "Namespace": "aws:elasticbeanstalk:environment:process:default",
                "OptionName": "HealthCheckPath",
                "Value": "/api/health"
              }
            ]
            EOF
            
            # Create the environment
            aws elasticbeanstalk create-environment \
              --application-name aushadhi-backend \
              --environment-name aushadhi-production \
              --solution-stack-name "64bit Amazon Linux 2 v3.5.1 running Docker" \
              --option-settings file://eb-options-temp.json
            
            echo "Waiting for environment to be created (this may take several minutes)..."
            aws elasticbeanstalk wait environment-exists --environment-names aushadhi-production
            
            echo "env_created=true" >> $GITHUB_OUTPUT
          else
            echo "Elastic Beanstalk environment 'aushadhi-production' already exists."
            echo "env_created=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: aushadhi-backend
          environment_name: aushadhi-production
          version_label: aushadhi-${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: Dockerrun.aws.json
          existing_bucket_name: ${{ secrets.AWS_S3_BUCKET }}
          wait_for_deployment: true
          wait_for_environment_recovery: 300
          
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          EB_URL=$(aws elasticbeanstalk describe-environments --environment-names aushadhi-production --query "Environments[0].CNAME" --output text)
          
          # Wait for the application to become available
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EB_URL/api/health || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Deployment successful! Health check endpoint is responding."
              exit 0
            fi
            
            echo "Waiting for application to become available... (Attempt $((RETRY_COUNT+1)) of $MAX_RETRIES)"
            RETRY_COUNT=$((RETRY_COUNT+1))
            sleep 30
          done
          
          echo "Error: Deployment verification failed. Health check endpoint is not responding."
          exit 1 